import streamlit as st
from PIL import Image
import os
from agno.agent import Agent
from agno.models.gemini import Gemini
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.media import Image as AgnoImage

# ---------------------------
# Streamlit UI Config
# ---------------------------
st.set_page_config(
    page_title="üß† AI Medical Q&A Chatbot",
    layout="wide",
    page_icon="üß†",
)

# ---------------------------
# Sidebar - API Key Input
# ---------------------------
with st.sidebar:
    st.title("‚öôÔ∏è Settings")
    api_key = st.text_input(
        "Enter your Google API Key",
        type="password",
        help="You can get your Gemini API key from Google AI Studio"
    )
    if api_key:
        st.session_state.GOOGLE_API_KEY = api_key

# ---------------------------
# Initialize Medical Agent
# ---------------------------
medical_agent = None
if "GOOGLE_API_KEY" in st.session_state and st.session_state.GOOGLE_API_KEY:
    try:
        medical_agent = Agent(
            model=Gemini(
                id="gemini-2.0-flash",
                api_key=st.session_state.GOOGLE_API_KEY
            ),
            tools=[DuckDuckGoTools()],
            markdown=True
        )
    except Exception as e:
        st.error(f"‚ö†Ô∏è Could not initialize Gemini agent: {e}")
else:
    st.warning("Please enter your Google API Key in the sidebar to enable analysis.")

# ---------------------------
# Main Title
# ---------------------------
st.title("üß† AI-Powered Medical Image Q&A Chatbot")
st.markdown("Upload a medical image and ask a question to get AI-powered insights. ‚öïÔ∏è")

# ---------------------------
# Image Upload
# ---------------------------
uploaded_file = st.file_uploader("üì§ Upload a medical image", type=["jpg", "jpeg", "png"])

if uploaded_file:
    image = Image.open(uploaded_file)

    # Resize image for display
    base_width = 500
    w_percent = base_width / float(image.size[0])
    h_size = int(float(image.size[1]) * float(w_percent))
    resized_image = image.resize((base_width, h_size))

    # Show uploaded image
    st.image(resized_image, caption="ü©ª Uploaded Medical Image", use_column_width=True)

    # ---------------------------
    # User Query Input
    # ---------------------------
    query = st.text_area("üí¨ Ask a question about this image:", placeholder="E.g., What abnormalities can you detect?")
    analyze_button = st.button("üîç Analyze")

    if analyze_button:
        with st.spinner("üîÑ Analyzing image... Please wait."):
            if not medical_agent:
                st.error("‚ùå No medical agent available. Please check your API Key in the sidebar.")
            else:
                try:
                    # Save resized image temporarily
                    temp_path = "temp_resized_image.png"
                    resized_image.save(temp_path)

                    # Convert to Agno format
                    agno_image = AgnoImage(filepath=temp_path)

                    # Run analysis
                    response = medical_agent.run(query, images=[agno_image])

                    # Display results
                    st.markdown("### üìã Analysis Results")
                    st.markdown("---")
                    st.markdown(response.content)
                    st.markdown("---")
                    st.caption("‚ö†Ô∏è Note: This analysis is generated by AI and should be reviewed by a qualified healthcare professional.")

                    # Clean up temp file
                    os.remove(temp_path)

                except Exception as e:
                    st.error(f"‚ö†Ô∏è Analysis error: {e}")
